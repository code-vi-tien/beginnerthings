generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

enum AddressType {
  BILLING
  SHIPPING
}

enum CartStatus {
  ACTIVE
  ABANDONED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
  REFUNDED
}

enum PaymentProvider {
  VNPAY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model User {
  id                    String              @id @default(uuid())
  email                 String              @unique
  passwordHash          String
  firstName             String
  lastName              String
  phone                 String

  role                  Role                @default(CUSTOMER)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  carts                 Cart? 
  reviews               Review[]           
  orders                Order[]
  addresses             Address[]
}

model Cart {
  id                    String              @id @default(uuid())
  user                  User                @relation(fields: [userId], references: [id])
  userId                String              @unique
  status                CartStatus          @default(ACTIVE)
  order                 Order?              

  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  lastActiveAt          DateTime            @default(now())
 
  cartItems             CartItem[]
}

model CartItem {
  id                    String              @id @default(uuid())
  cart                  Cart                @relation(fields: [cartId], references: [id])
  cartId                String
  productVariant        ProductVariant      @relation(fields: [productVariantId], references: [id])
  productVariantId      String
  @@unique([cartId, productVariantId])
  quantity              Int                 @default(1)
  priceSnapshot         Decimal             @db.Decimal(10, 2)

  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Product {
  id                    String              @id @default(uuid())
  name                  String 

  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  variants              ProductVariant[]        
}

model ProductVariant {
  id                    String              @id @default(uuid())
  product               Product             @relation(fields: [productId], references: [id])
  productId             String
  variant               String?
  price                 Decimal             @db.Decimal(10, 2)
  stock                 Int                 @default(0)

  cartItems             CartItem[]
  orderItems            OrderItem[]
}

model Order {
  id                    String              @id @default(uuid())
  user                  User?               @relation(fields: [userId], references: [id])
  userId                String?
  cart                  Cart                @relation(fields: [cartId], references: [id])
  cartId                String              @unique
  status                OrderStatus         @default(PENDING)
  subtotal              Decimal             @db.Decimal(10, 2)
  tax                   Decimal             @db.Decimal(10, 2)       
  total                 Decimal             @db.Decimal(10, 2)

  orderItems            OrderItem[]
  payments              Payment[]

  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model OrderItem {
  id                    String              @id @default(uuid())
  order                 Order               @relation(fields: [orderId], references: [id])
  orderId               String
  productVariant        ProductVariant      @relation(fields: [productVariantId], references: [id])
  productVariantId      String
  quantity              Int
  priceSnapshot         Decimal             @db.Decimal(10, 2)

  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  @@unique([orderId, productVariantId])
}

model Payment {
  id                    String              @id @default(uuid())
  user                  User?               @relation(fields: [userId], references: [id])
  userId                String?
  order                 Order?              @relation(fields: [orderId], references: [id])
  orderId               String?                  
  provider              PaymentProvider
  providerSessionId     String?           
  status                PaymentStatus       @default(INITIATED)
  amount                Decimal             @db.Decimal(10, 2) 

  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

